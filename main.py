from src.document import Documenter
import argparse
import subprocess
import os

CODE_EXTENSIONS = {
    # General programming languages
    '.c', '.cpp', '.cxx', '.cc', '.h', '.hpp', '.hxx', '.inl', '.tcc',  # C/C++ family
    '.java', '.class', '.jar',  # Java
    '.py',  # Python
    '.rb',  # Ruby
    '.js', '.jsx', '.mjs',  # JavaScript
    '.ts', '.tsx', '.d.ts',  # TypeScript
    '.go',  # Go
    '.php',  # PHP
    '.swift',  # Swift
    '.kt', '.kts',  # Kotlin
    '.r', '.rmd',  # R
    '.lua',  # Lua
    '.pl', '.pm',  # Perl
    '.sh', '.bash', '.zsh', '.fish',  # Shell scripts
    '.html', '.htm', '.xhtml',  # HTML
    '.css',  # CSS
    '.less', '.scss', '.sass',  # CSS preprocessors
    '.json',  # JSON
    '.xml',  # XML
    '.yml', '.yaml',  # YAML
    '.sql',  # SQL
    '.vhdl', '.vhd',  # VHDL
    '.asm', '.s', '.asm32',  # Assembly languages
    '.m', '.mm',  # Objective-C and Objective-C++
    '.scala',  # Scala
    '.clj', '.cljs',  # Clojure
    '.hs',  # Haskell
    '.elm',  # Elm
    '.nim',  # Nim
    '.d',  # D programming language
    '.vala',  # Vala
    '.racket',  # Racket (Scheme-based language)
    '.f90', '.f95', '.f03', '.f08',  # Fortran
    '.objc', '.objcpp',  # Objective-C++ and Objective-C
    '.tsv',  # Tab-separated values
    '.xsd',  # XML Schema Definition
    '.csv',  # Comma-separated values
    '.csv',  # Comma-separated values
    '.cabal',  # Haskell's Cabal build system
    '.el',  # Emacs Lisp
    '.sml',  # Standard ML
    '.coffee',  # CoffeeScript
    '.pug',  # Pug (formerly Jade)
    '.twig',  # Twig
    '.handlebars',  # Handlebars
    '.rpy',  # Ren'Py (Python-based)
    '.jl',  # Julia
    '.sh',  # Shell scripts
    '.awk',  # AWK script
    '.dart',  # Dart
    '.hbs',  # Handlebars template
    '.groovy',  # Groovy
    '.v',  # Verilog (hardware description language)
    '.fs', '.fsx',  # F# (F Sharp)
    '.gdb',  # GDB (Debugger scripts)
    '.ps1',  # PowerShell script
    '.scss',  # Sass (CSS preprocessor)
    '.ts',  # TypeScript
}
def main():
  parser = argparse.ArgumentParser(description="Parse command line arguments")
  parser.add_argument('root', type=str, help='The top level directory to process')
  parser.add_argument('--hidden', action='store_true', help='Include hidden files')
  parser.add_argument('--all', action='store_true', help='Include all files')
  parser.add_argument('--filewise', action='store_true', help="generate a md file for each code file")

  parser.add_argument('--langs', type=str, help='Languages to include (e.g., .js .py)', default="")
  parser.add_argument('--github', type=str, help='link to a github repo to document', default="")
  parser.add_argument('--api_key', type=str, help='your claude api key', default="")

  # Parse the arguments
  args = parser.parse_args()

  if args.github is not None:
     print('here')
     subprocess.run(['git', 'clone', args.github])


  file, hidden, all_ = args.root, args.hidden, args.all
  if args.langs:
      langs_list = set(args.langs.split())
  else:
      langs_list = CODE_EXTENSIONS

  documenter = Documenter(file)
  documenter.document(file, 0, hidden, all_, extensions=langs_list)

  if args.github:
     os.chdir(file)
     for file_ in documenter.files:
      to_add = os.path.basename(file_)+'.md'
      subprocess.run(['git', 'add', to_add])
     subprocess.run(['git', 'commit', '-m', '"Documenation generated by Claude :p"'])
     subprocess.run(['git', 'push'])
     os.chdir('..')
     print(os.getcwd())
     print(file)
     subprocess.run(['powershell', 'rm', '-R', file, '-Force'])

if __name__ == "__main__":
   main()

